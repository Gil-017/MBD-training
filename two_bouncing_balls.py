# -*- coding: utf-8 -*-
"""Two_bouncing_balls.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bbn2Px9_0GEOAQYIKZbVmmU8mh9gCALs
"""

from numpy import sin, cos
import numpy as np
import matplotlib.pyplot as plt
import scipy.integrate as integrate
import matplotlib.animation as animation
from matplotlib import rc

"""모듈 임포트"""

# global variables
m1 = 1
m2 = 1
R1 = 1
R2 = 1
g = 9.81
K = 1e7

"""글로벌 변수 정의"""

# =======================================
def diff_s(t, y):

    F1 = 0
    F2 = 0

    if y[0]<R1:
      F1 = K * (R1-y[0])

    if y[1]-y[0]<R1+R2:
      F2 = K* (R1+R2 - (y[1]-y[0]))

    acc = [-m1*g + F1 - F2, -m2*g+F2]
    ydot = np.append(y[2:4], acc)
    return ydot

"""함수 정의"""

# =====================================
# create a time array from 0..100 sampled at 0.05 second steps
dt = 0.05
t = np.arange(0.0, 20, dt)

# initial state
state = np.array([5,10,0,0])

# integrate your ODE using scipy.integrate.
output = integrate.solve_ivp(diff_s, (0,20), state, t_eval = t, method='RK45',
                  rtol=1e-6, atol=1e-9)

"""numerical integration - RK45 사용"""

y = output.y
t = output.t

plt.figure()
plt.plot(t,y[0],label='Body 1')
plt.plot(t,y[1],label='Body 2')
plt.xlabel('time (s)')
plt.ylabel('ball position')
plt.legend()

total_energy = m1*g*y[0] + m2*g*y[1] + 1/2*m1*y[2]**2 + 1/2*m2*y[3]**2
plt.figure()
plt.plot(t, total_energy)
plt.ylim(147.1,147.2)
plt.xlabel('time (s)')
plt.ylabel('total energy')



"""결과 플롯"""

fig = plt.figure()
ax = fig.add_subplot(111, autoscale_on=False, aspect='equal', xlim=(-4, 4), ylim=(0, 12))
ax.grid()


#
circle1 = plt.Circle( (0,5),  radius=R1)
circle2 = plt.Circle( (0,10), radius=R2)

time_template = 'time = %.1fs'
time_text = ax.text(0.05, 0.9, '', transform=ax.transAxes)


def init():
    circle1.center=0,5
    circle2.center=0,10
    ax.add_patch(circle1)
    ax.add_patch(circle2)
    time_text.set_text('')
    return circle1, circle2, time_text


def animate(i):
    circle1.center=0,y[0][i]
    circle2.center=0,y[1][i]
    time_text.set_text(time_template % (i*dt))
    return circle1, circle2, time_text

#rc('animation', html='jshtml')

ani = animation.FuncAnimation(fig, animate, np.arange(1, len(y[0])),
                              interval=25, blit=False, repeat=True, init_func=init)

#ani
plt.show()
"""에니메이션 구현"""
